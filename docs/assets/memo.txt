http://127.0.0.1:8080
npx http-server
スーパーリロード（Ctrl + Shift + R）を実行。

本番deploy
  https://tuis-sa.github.io/website/
github
  https://github.com/tuis-SA/website/tree/main
画像（home（index.html）のContentに使用される画像）
  800x600 統一　or 1600 1200 比率統一する()
  4対３のアスペクト比にする。

  手順
  　・jpg... etcをpngに変換する
  　・比率を800×600にするため一度画像を大きくする。
  　・その後、切り抜き（https://www.iloveimg.com/ja/crop-image）に移動して、切り抜きたい画像のぎりぎり比率
  　　 800*x 600*x　を切り抜き、保存する。
  　・その後、画像のリサイズ（https://www.iloveimg.com/ja/resize-image）で800　600  にリサイズして
  　　作業を終える

画像（ホームの見出し画像について
　基本的にスマホを縦に持った時の画像を使用する。そのためみんなで集まって撮るなどする。
　ぶっちゃけ同じ画像スマホ・デスクトップと対応させるなら同じ画像に対し「スマホ横で撮ったとき」「スマホ縦で撮ったとき」と二つ取るべき。


CSS適用について
  index.htmlに記載しないと適応できない。
    例index.html中に<link rel="stylesheet" href="css/Seminar_header.css">と記載して適用。
  動的コンテンツの性質上
  各htmlファイルに対してcssを適用するにはそうするしかない。

HTMLファイルのclass名について
  CSSを適用させるために、class名に名前をつけると思う。
  このサイト全体は全てのCSSファイルが共有されている状態（動的にjsファイルを無理やり作ったらそうなったごめん）
  状態なので、命名規則がある。
  例えば、seminar.htmlに外部cssファイル seminar.cssを用意したとしよう。
  その時、seminar.html内に<div class="ファイル名_Topics">と命名下記、
     <div class="seminar_Topics">　
  となる。
  このように、class="ファイル名_Topicsとすれば、共有されるcssに重複は起きないのでこのように命名しよう。
     class="seminar_Content_event_description_h2"
  みたいに。また、seminar.cssをseminar.htmlに適用したいときにはindex.htmlに外部cssファイルを記載しよう。
  構造上 index.htmlの<head><head>が全てのcssファイル、jsファイルを持っているので、ここに
    index.html内
          <link rel="stylesheet" href="css/seminar.css">
  のように記載すると適用できる。


ホーム説明原文
ゼミ紹介文
本ゼミでは、CanSat活動の中で組み込みソフトウェアに対する理解を深めており、最近では鳥取ローバーチャレンジでの経験から従来の2輪のローバーだけでなく
4輪ローバーの開発も進めています。また、CanSat大会では地面を走るランバック部門のローバーでの参加をしていますが、ゼミ生の中にはドローン班によるフライバック
部門の参加を目指しているメンバーも活動しています。

CanSat紹介文
本ゼミのCanSat活動では、缶サイズの模擬人工衛星の製作を通じて組み込みソフトウェアの開発を実践的に学んでいます。アメリカのARLISS大会や能代・種子島の国内大会に参加し、
大学内での独自大会の開催や企業スポンサーの獲得にも力を入れています。また、拡張式タイヤなどの新機構開発にも挑戦しています。

ARLISS
ARLISSとは、アメリカ合衆国のネバダ州ブラックロック砂漠という場所で行われるCanSatの大会です。
ARLISSでは、国内外から挑戦者が参加しているため思考を凝らした数々の機体によるハイレベルの挑戦が行われます。また、
地面を走るランバックの他にドローンを用いたフライバックによる挑戦も行われており、競技最終日には各参加団体がコミュニケー
ションを取り合い、それぞれの機体を説明する交流会が開かれます。

種子島ロケットコンテスト
種子島ロケットコンテストとは、鹿児島県の種子島で開催されている大会です。種子島ロケットコンテストでは、主に学生チームだけでなく
社会人チームなど国内から様々な参加者が集まります。また、CanSat部門だけではなくロケット部門の2部門で構成されているため大会中には
走っているローバーの隣で、空へ飛び立つロケットを見ることができます。競技場の近くには、JAXA種子島宇宙センターがありお土産を
購入したりロケット技術に触れることができます。



bootstrapが指定してないのに勝手に上書きするケースがある。
ard{border-radius: opx;}ってやってんのに丸くなる現象おきてるから
border-radius: 0 !important;として上書きするって感じ

動的レンダリングにするため、header以外の各HTMLのbody部分に記載するのではなくまず
  <div id="content" class="section-content">
  </div>
  内に書き込み、ナビゲーションごとに内容を変更する必要がある。
js
  HTMLを動的に読み込み (fetch)、#content に差し替える仕組みを作っている。

前提
  リモート名が websiteである #git remote

PC responsive基準
1240 281

スマホ responsive基準
375 667

初期準備
  前提Gitとvscodeエディタがインストールされていて
    Git の初期設定コマンド（--global）
    git config --global user.name "あなたの名前"
    git config --global user.email "あなたのメールアドレス"
  が終わってる。（やり方は調べて

  準備
    自身が作業したいフォルダでコマンドプロンプトを開き、
    git clone https://github.com/tuis-SA/website.git
    を実行する。
    実行したディレクトリ内部に websiteというファイルが出来上がるので、
    移動するため、そのディレクトリ階層でコマンド
    cd websiteを実行する。

    その後素の階層で自身が作業する場所を作るため
    git checkout -b dev/自身の任意の作業ブランチ名
    例
     git checkout -b dev/nekomaとか

    を実行する。
    git branch を実行して

    ※ dev/自身の任意の作業ブランチ名
    例
      ※ dev/nekoma
    
    と出れば成功である。これで初期設定は終わり。
  
例:作業前
  ※必ずやること 
   git pull origin main 

  ※任意
    #git fetch website                                          #最新のリモート情報(GitHub上で他の作業ブランチがマージされた結果)を取得
    #git diff website/main 自身の作業ブランチ名(例：dev/nekoma)   #差分確認
      リモートの website にある main ブランチ と
      ローカルの自身の作業ブランチ名(例：dev/nekoma)　ブランチ を
      差分比較する

    上記の時、間違えて他の人が他の作業領域を変える、例えばdev/banbuがやるところの一部をdev/nekomaが変えてしまって身に覚えのない
    変更がされている出力が出るときがある（ほぼないと思うけど　万が一）。その時の出力例として

      diff --git a/website/pageA/index.html b/website/pageA/index.html
      index 1a2b3c4..5d6e7f8 100644
      --- a/website/pageA/index.html
      +++ b/website/pageA/index.html
      @@ -10,7 +10,7 @@
      -    <h2>Page A subtitle</h2>
      +    <h2>Page A subtitle updated</h2>

      @@ -25,6 +25,7 @@
          <ul>
              <li>Item 1</li>
              <li>Item 2</li>
      +        <li>Item added by someone else?</li>
          </ul>


  この例を見てわかることとして「二つの追加」と「一つの削除（@@ -10,7 +10,7 @@同じ行なので変更）」などがある。
  <li>Item added by someone else?</li>　の部分がdev/banbuが変更に身に覚えがないのであれば、まず誰がやったかを
  確認するため下記コマンド例

  git blame website/main -- website/pageA/index.html

  などで確認し出力例として
  1a2b3c4d (banbu   2024-05-31 09:01:00 +0900)     <h2>Page A subtitle</h2>
  5d6e7f8a (nekoma  2024-06-01 10:12:45 +0900)     <li>Item added by someone else?</li>
  とnekomaが勝手に変更したと特定できるので理由を問い詰めよう。（相談しましょ）

  なお、これらはコンフリクト起こしたくないというときなので、べつに起きても直せばいいのでそこは大丈夫です。
  大丈夫かなーと思ったら作業開始


例:作業後

  自身がdevディレクトリ内で行ったことをdocsディレクトリ内にコピーする。
  つまり、devのディレクトリ内とdocsディレクトリ内は同じ内容となる。
  その後に .gitがあるディレクトリに cd コマンドで移動して下記コマンドを実行する。
  git add .
  git commit -m "｛変更した内容などざっくり記述｝"
  git push リモート名(例origin)　自身の作業ブランチ名(例dev/nekoma)

  push終わったらサイトリーダーに報告。

サイトリーダーのやること。
  https://github.com/tuis-SA/website
  に行き、　ブランチ名の main ▾　をプッシュした人のブランチ名に移動する。
  　例　
  　　西村の作業ブランチdev/nekomaにプッシュしたら
  　　main から　dev/nekoma に切り替るなど。
  切替後、 Contribute ▾ をおして Open pull request　ボタンが表示されているので押す。
  Create pull request というボタンがあるのでそれを押す。

  コンフリクトがなければ　Merge pull request　というボタンが押せるので押す。
  　※コンフリクトがあれば解決する「やり方は調べて

  押すと　Confirm merge　とでるのでそれを押す。
  Pull request successfully merged and closed
　となれば成功。

　https://github.com/tuis-SA/website/actions
　に移動すると、pages build and deploymentが実行されているのがわかる。

　上記の文字列を押し実行状況が確認できる。
　実行が終われば、　deploy という文字のしたに、リンクがあるのでそれを確認おすと
　現在公開されているサイトが見れる。

　もし更新されていなと感じるなら下記の原因が推測できる。
　　・docsディレクトリに反映してない。(devの更新をdocsに写してない。)
　　・ブラウザのキャッシュが残っている。　Ctrl Shift r を押しまくって更新するか
　　　シークレットモードでサイト見る。
　　・もしローカル上でファイル名を大文字だけ変更した　例　cansat.html を Cansatに変更してpush した
　　　場合それがgithub上でファイル名が大文字に治らない現象があり、調べてコマンド実行して自力解決すること。（AIに聞けばわかる
　　



その他メモ
ローカル、リモート含めたブランチ名表示
#git branch -a


index.html
<!-- 2か月ごとに更新。--->の基準
　写真があるor大きな話題性がある（企業の方との打ち合わせや大会の参加・快挙等）があれば掲載。掲載表示数は5件までにし持っと見たい型の場合
　moreボタンで表示する。閉じると全て閉じるにする。

defer属性を使用する: 
  これまで説明した通り、defer属性を使用すると、スクリプトのダウンロードがHTMLの解析と並行して行われ、スクリプトの実行はHTMLの解析が完了してからになります。
  これにより、ページの表示がブロックされず、スクリプトはDOMが準備できた状態で実行されます。

その他英語等
  Toggle
  「Toggle（トグル）」は、切り替えを意味する言葉です。

  語源の解説
    Toggle
      「Toggle」の語源は、ゲルマン祖語の「*tug-」（引っ張る、引く）に由来するとされています。ここから、中世英語の「toggen」（引く、引っ張る）を経て、「toggle」という言葉が生まれました。
      元々は、衣類を留めるための、棒状の留め具（トグルボタン）が語源です。トグルボタンは、ループに差し込んだり引き抜いたりすることで、ON/OFFのように「切り替え」を行う道具なので、そこから「切り替える」という意味が派生しました。


SEO対策　GG gemini(Aiに聞く。)
  https://search.google.com/search-console/welcome
  詳細
    所有権の確認は、Googleがあなたのサイトを「あなたのもの」と認識したという最初のステップです。ここから、
    Googleのロボット（クローラー）があなたのサイトを訪れてページの内容を読み込み（クロール）、その情報をGoogleのデータベースに登録（インデックス）
    するプロセスが始まります。

    このクロールとインデックスには、時間がかかります。サイトの規模やGoogleのクローラーの巡回頻度によりますが、数日〜数週間かかることも珍しくありません。
  カスタムドメインにすべきだか検討中